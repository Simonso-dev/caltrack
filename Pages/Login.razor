@layout LoginAndRegisterLayout 
@page "/login"
@using caltrack.Authentication;
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Login</PageTitle>

<h3>Login</h3>

   <ErrorDialog error="error" errorMsg="@errorMsg" />

    <EditForm Model="loginUser" OnSubmit="HandleLoginSubmit" class="mb-4">
        <label for="username" class="form-label">Username</label>
        <InputText placeholder="Username" id="username" @bind-Value="loginUser.Username" class="mb-2 form-control"/>
        <label for="password" class="form-label">Password</label>
        <InputText placeholder="Password" type="password" @bind-Value="loginUser.Password" id="password" class="form-control mb-3"/>
        <button type="submit" class="btn btn-primary w-100">Login</button> <p class="text-center mt-4">Not registerd? <a href="/register">Register</a></p>
    </EditForm>

@code {
    private User loginUser = new();
    private string? errorMsg = "Wrong username or password!";
    private bool error;
    private bool hashMatch;

    private async Task HandleLoginSubmit() {
        try {
            var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/users/login", loginUser);
            
            if(response.StatusCode.Equals(400)) 
                error = true;

            var jwt = await response.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("token", jwt);
            var principal = ParseClaimsFromJwt(jwt);
            var identity = (ClaimsIdentity)principal.Identity;

            var name = identity.FindFirst(ClaimTypes.Name).Value;
            var role = identity.FindFirst(ClaimTypes.Role).Value;

            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession {
                Username = name,
                Role = role,
            });
            NavigationManager.NavigateTo("/", true);
        }
        catch(Exception ex) {
            ex.GetBaseException();
            error = true;
        } 
    }

    private static ClaimsPrincipal ParseClaimsFromJwt(string jwt) {
        var tokenHandler = new JwtSecurityTokenHandler();
        var token = tokenHandler.ReadJwtToken(jwt);

        if(token is null)
            return null;
        
        var claims = new ClaimsIdentity(token.Claims,
            CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(claims);

        return principal;
    }
}