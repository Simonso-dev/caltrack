@using System.Net.Http.Headers;
@page "/edituser"
@page "/edituser/{UserId:int}"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@attribute [Authorize(Roles = "Administrator")]

    <PageTitle>Edit user </PageTitle>
    <div class="container-lg">
    <h3>Edit User</h3>

    <EditForm Model="user" OnSubmit="HandleUpdateSubmit" class="mb-4">
        <label for="username" class="form-label">Username</label>
        <InputText placeholder="Username" id="username" @bind-Value="user.Username" class="mb-2 form-control"/>
        <label for="role" class="form-label">Role</label>
        <InputText placeholder="Role" @bind-Value="user.Role" id="role" class="form-control mb-3"/>
        <button type="submit"class=" btn btn-primary">Update user</button> | <a href="/useradmin">Go back</a> | <a href="deleteuser/@user.UserId">Delete</a>
    </EditForm>
    </div>

@code {
    [Parameter]
    public int UserId { get; set; }

    private User? user = new();

    private async Task HandleUpdateSubmit() {
        await HttpClient.PutAsJsonAsync<User>(NavigationManager.BaseUri + $"api/users/{UserId}", user);
        NavigationManager.NavigateTo("/useradmin");
    }

    protected override async Task OnParametersSetAsync() {
        // if(UserId != null) {
        try {
            var token = await LocalStorage.GetItemAsStringAsync("token");
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
            var result = await HttpClient.GetFromJsonAsync<User>(NavigationManager.BaseUri + $"api/users/{UserId}");
            if(result is not null) {
                user = result;
            }
            else {
                NavigationManager.NavigateTo("/useradmin");
            }
        }
        catch(Exception ex) {
            ex.GetBaseException();
        }
        // }
    }
}



